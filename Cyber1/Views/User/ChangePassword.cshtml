@using Cyber1.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity;
@using Cyber1.Migrations;
@model Cyber1.Models.User;

<h2>Zmiana hasła</h2>

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@using Cyber1.Models;
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Options
@inject IOptions<GoogleCaptchaConfig> GoogleCaptchaConfig

@if (SignInManager.IsSignedIn(User) )
{
    @using (Html.BeginForm("ChangePassword", "User", FormMethod.Post))
    {
        @Html.ValidationSummary()
        ;

        <span>Password: </span> @Html.PasswordFor(x => x.Password)  

        <button type="submit">Change password</button>
    }

}

<div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Update</button>
            <a asp-action="GetUserList" asp-controller="UserList" class="btn btn-primary">Cancel</a>
            <input type="hidden" id="LoginViewModelToken" asp-for="Token" />
        </div>
</div>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>
<script>
    function onSubmit(token) {
        document.getElementById("demo-form").submit();
    }
</script>

<script src="https://www.google.com/recaptcha/api.js?render=@GoogleCaptchaConfig.Value.SiteKey"></script>
<script>
    $(function () {
        grecaptcha.ready(function () {
            grecaptcha.execute('@GoogleCaptchaConfig.Value.SiteKey', { action: 'submit' }).then(function (token) {
                // Add your logic to submit to your backend server here.
                console.log(token);
                document.getElementById("LoginViewModelToken").value = token;
            });
        });
    });
</script>